# Analysis Options - Production-Grade Configuration
# Based on best practices from Google, Very Good Ventures, and Flutter team
# Last Updated: October 16, 2025

include: package:flutter_lints/flutter.yaml

analyzer:
  # Exclude generated files and build outputs
  exclude:
    - '**/*.g.dart'
    - '**/*.freezed.dart'
    - '**/*.gr.dart'
    - '**/*.config.dart'
    - '**/generated/**'
    - 'lib/generated/**'
    - 'build/**'
    - '.dart_tool/**'
  
  # Strong mode settings
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  
  # Error settings
  errors:
    # Treat missing required parameters as errors
    missing_required_param: error
    missing_return: error
    
    # Type system
    invalid_assignment: error
    invalid_use_of_protected_member: error
    
    # Deprecated API usage
    deprecated_member_use: warning
    deprecated_member_use_from_same_package: ignore
    
    # Nullability
    invalid_null_aware_operator: error
    unnecessary_null_comparison: error
    
    # Make certain lints errors instead of warnings
    always_declare_return_types: error
    avoid_relative_lib_imports: error
    avoid_types_as_parameter_names: error
    empty_catches: error
    no_duplicate_case_values: error
    prefer_void_to_null: error
    unnecessary_statements: error
    unrelated_type_equality_checks: error
    valid_regexps: error
  
  # Language settings
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

linter:
  rules:
    # ERROR RULES - Critical issues that must be fixed
    
    # Avoid common mistakes
    - always_use_package_imports
    - avoid_empty_else
    - avoid_print
    - avoid_relative_lib_imports
    - avoid_returning_null_for_future
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_as_parameter_names
    - avoid_web_libraries_in_flutter
    - cancel_subscriptions
    - close_sinks
    - comment_references
    - control_flow_in_finally
    - empty_catches
    - empty_statements
    - hash_and_equals
    - iterable_contains_unrelated_type
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - no_logic_in_create_state
    - prefer_void_to_null
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_statements
    - unrelated_type_equality_checks
    - unsafe_html
    - use_build_context_synchronously
    - use_key_in_widget_constructors
    - valid_regexps
    
    # STYLE RULES - Code quality and consistency
    
    # Always declare types
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - always_require_non_null_named_parameters
    - always_specify_types
    
    # Annotations
    - annotate_overrides
    - avoid_annotating_with_dynamic
    
    # Async
    - avoid_void_async
    - unawaited_futures
    
    # Booleans
    - avoid_bool_literals_in_conditional_expressions
    
    # Collections
    - avoid_function_literals_in_foreach_calls
    - prefer_collection_literals
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    
    # Comments
    - package_api_docs
    - public_member_api_docs
    
    # Constructors
    - avoid_catching_errors
    - avoid_field_initializers_in_const_classes
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - sort_constructors_first
    - unnecessary_const
    - unnecessary_new
    
    # Error handling
    - use_rethrow_when_possible
    
    # Functions
    - avoid_positional_boolean_parameters
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_returning_null
    - avoid_returning_null_for_void
    - avoid_returning_this
    - avoid_setters_without_getters
    - prefer_expression_function_bodies
    - prefer_final_parameters
    - prefer_function_declarations_over_variables
    - type_annotate_public_apis
    - unnecessary_lambdas
    
    # Imports
    - avoid_renaming_method_parameters
    - directives_ordering
    - implementation_imports
    
    # Naming
    - camel_case_extensions
    - camel_case_types
    - constant_identifier_names
    - file_names
    - library_names
    - library_prefixes
    - non_constant_identifier_names
    - package_names
    
    # Null safety
    - avoid_null_checks_in_equality_operators
    - null_check_on_nullable_type_parameter
    - null_closures
    - prefer_conditional_assignment
    - prefer_if_null_operators
    - unnecessary_null_aware_assignments
    - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    
    # Objects
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_implementing_value_types
    - avoid_js_rounded_ints
    - avoid_multiple_declarations_per_line
    - avoid_shadowing_type_parameters
    - avoid_unnecessary_containers
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_for_elements_to_map_fromIterable
    - prefer_foreach
    - prefer_if_elements_to_conditional_expressions
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_interpolation_to_compose_strings
    - prefer_typing_uninitialized_variables
    - provide_deprecation_message
    - recursive_getters
    - sized_box_for_whitespace
    - sort_child_properties_last
    - sort_unnamed_constructors_first
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_getters_setters
    - unnecessary_late
    - unnecessary_null_aware_operator_on_extension_on_nullable
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - use_colored_box
    - use_decorated_box
    - use_enums
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_setters_to_change_properties
    - use_string_buffers
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
    
    # Strings
    - avoid_escaping_inner_quotes
    - leading_newlines_in_multiline_strings
    - no_runtimeType_toString
    - noop_primitive_operations
    - only_throw_errors
    - prefer_adjacent_string_concatenation
    - prefer_double_quotes
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_single_quotes
    - unnecessary_string_escapes
    
    # Widget best practices
    - avoid_unnecessary_containers
    - sized_box_for_whitespace
    - sort_child_properties_last
    - use_colored_box
    - use_decorated_box
    - use_full_hex_values_for_flutter_colors
    
    # Performance
    - avoid_slow_async_io
    - avoid_unnecessary_containers
    - prefer_const_constructors
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    
    # Security
    - unsafe_html

# Custom lint rules for the project
# These can be added via custom_lint package if needed
