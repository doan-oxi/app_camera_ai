---
description: "Enforce Clean Architecture with strict layer separation. Dependencies point inward only: Presentation → Domain ← Data ← Infrastructure."
globs:
  - "lib/**/*.dart"
alwaysApply: true
---

# Clean Architecture

## Layer Structure

Four layers with strict dependency rules:
- **Presentation**: UI, widgets, state management (Bloc/Cubit)
- **Domain**: Entities, UseCases, repository interfaces (Pure Dart)
- **Data**: Repository implementations, data sources
- **Infrastructure**: SDK, API, database, platform channels

Dependencies MUST point inward only: Presentation → Domain ← Data ← Infrastructure

## Folder Organization

```
lib/
├── domain/entities/          # Business objects (Camera, VideoStream, AIDetection)
├── domain/repositories/      # Repository interfaces (abstract classes)
├── domain/usecases/          # Single business operations
├── data/models/              # DTOs for serialization
├── data/repositories/        # Repository implementations
├── data/datasources/         # Remote/Local/SDK sources
├── infrastructure/sdk/       # Veepai SDK wrapper
├── infrastructure/network/   # HTTP, P2P clients
├── infrastructure/storage/   # Database, cache
├── presentation/screens/     # Full-screen pages
├── presentation/widgets/     # Reusable components
└── presentation/state/       # Bloc/Cubit
```

## Domain Layer Rules

- Use ONLY pure Dart (no Flutter, no SDK imports)
- Never import `package:flutter/*`
- Never import `package:vsdk/*`
- Never import `dart:io`, `dart:ui`
- All entities must be immutable
- Repository interfaces only (no implementations)
- UseCases contain single business operation
- No platform-specific code

## Data Layer Rules

- Implement domain repository interfaces
- Convert models ↔ entities (never expose models to domain)
- Coordinate multiple data sources
- Handle data transformation
- Never contain business logic
- Never expose SDK types
- Return domain entities only

## Infrastructure Layer Rules

- Direct SDK integration allowed
- Platform channel code here
- Network clients (HTTP, P2P)
- Database access (Hive, SQLite)
- Return models (not entities)
- Never contain business logic
- Wrap third-party SDKs

## Presentation Layer Rules

- Depend ONLY on domain layer
- Never call repositories directly (use UseCases)
- Never import data or infrastructure layers
- State management with Bloc/Cubit
- Use Provider/GetIt for DI
- Widgets should be dumb (no business logic)
- Extract complex logic to UseCases

## File Size Limits

- Files: < 300 lines (hard limit)
- Functions: < 50 lines
- Classes: Single responsibility
- Split large files by feature or concern
- Use mixins for cross-cutting concerns
- Use extensions for utilities

## Dependency Injection

- Use GetIt for service locator
- Register in `lib/core/di/injection_container.dart`
- Lazy singletons for repositories
- Factory for Blocs/UseCases
- Never use Bloc/UseCase constructors directly
- Always inject dependencies through constructor

## Naming Conventions

- Entities: `Camera`, `VideoStream`, `AIDetection`
- Models: `CameraModel`, `VideoStreamDto`
- Repositories: `CameraRepository` (interface), `CameraRepositoryImpl` (implementation)
- UseCases: `ConnectCameraUseCase`, `GetCameraStatusUseCase`
- Data sources: `VeepaiSdkDataSource`, `CameraLocalDataSource`
- Blocs: `CameraBloc`, `VideoStreamBloc`
- States: `CameraState`, `VideoStreamState`
- Events: `CameraEvent`, `VideoStreamEvent`
