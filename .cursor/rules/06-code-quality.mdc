---
description: "Code quality standards: KISS principles, meaningful naming, shared resources organization, reusability, maintainability, and scalability."
globs:
  - "**/*.dart"
  - "**/*.kt"
  - "**/*.swift"
alwaysApply: true
---

# Code Quality & Organization

## KISS Principle

- Keep It Simple, Stupid
- Simple over clever
- Readable over concise
- Explicit over implicit
- Clear naming over comments
- Avoid over-engineering
- Solve today's problem, not tomorrow's

## Naming Conventions

**Never use these names:**
- `Manager`, `Handler`, `Helper`, `Util`, `Service`
- `v1`, `v2`, `new`, `old`, `enhanced`
- Single letters (except loop counters)
- Abbreviations (`mgr`, `tmp`, `hlpr`)
- Generic names (`data`, `info`, `value`)

**Always use specific, descriptive names:**
- Classes: `CameraConnectionCoordinator`, `VideoFrameProcessor`
- Functions: `connectCamera()`, `processVideoFrame()`
- Variables: `activeCamera`, `pendingVideoFrames`, `isConnectionEstablished`
- Booleans: `isConnected`, `hasActiveStream`, `canDetectMotion`, `shouldRetry`

## File Size Limits

- Files: < 300 lines (HARD LIMIT)
- Functions: < 50 lines
- Classes: Single responsibility
- Split large files by feature
- Extract complex logic to separate files

## Shared Resources

**Constants** (`lib/core/constants/`)
- `app_constants.dart`: App-wide constants
- `camera_constants.dart`: Camera-specific values
- `network_constants.dart`: Timeouts, endpoints
- Use class with static const fields (private constructor)

**Theme** (`lib/core/theme/`)
- `app_colors.dart`: All colors (primary, accent, status, semantic)
- `app_text_styles.dart`: Typography (heading1, body, caption)
- `app_dimensions.dart`: Spacing, radius, icon sizes
- `app_theme.dart`: Complete MaterialApp theme

**Reusable Widgets** (`lib/presentation/widgets/`)
- `buttons/`: PrimaryButton, SecondaryButton, IconButtonWidget
- `cards/`: CameraCard, InfoCard
- `inputs/`: TextInputField, PasswordInputField
- `dialogs/`: ConfirmationDialog, ErrorDialog
- `loading/`: LoadingIndicator, ShimmerLoading

## Code Reusability

**Mixins for shared behavior:**
- Create mixins for cross-cutting concerns
- Use for lifecycle management
- Use for common operations
- Example: `ConnectionLifecycle`, `Disposable`

**Extensions for utilities:**
- String extensions: validation, formatting
- DateTime extensions: formatting, comparison
- Widget extensions: padding, margin helpers
- Keep in `lib/core/extensions/`

**Base classes:**
- Create base classes for common functionality
- Use for error handling, logging
- Example: `BaseBloc`, `BaseRepository`, `BaseUseCase`

## Dependency Injection

**Setup** (`lib/core/di/`)
- Use GetIt for service locator
- Register in `injection_container.dart`
- Lazy singletons for long-lived services
- Factories for short-lived objects
- Never use `new` keyword directly

**Registration order:**
1. Data sources
2. Repositories
3. UseCases
4. Blocs/Cubits

## Environment Configuration

**Config files** (`lib/core/config/`)
- `app_config.dart`: Base abstract class
- `dev_config.dart`: Development settings
- `staging_config.dart`: Staging settings
- `prod_config.dart`: Production settings
- Select based on `--dart-define=ENV=dev`

## Quick Checklist

Before committing:
- ✅ All files < 300 lines?
- ✅ All functions < 50 lines?
- ✅ Meaningful names (no Manager, Handler, v1)?
- ✅ Constants in `core/constants/`?
- ✅ Colors/styles in `core/theme/`?
- ✅ Reusable widgets extracted?
- ✅ Code reusable elsewhere?
- ✅ Easy to test?
- ✅ Easy to maintain?
- ✅ SOLID principles followed?
